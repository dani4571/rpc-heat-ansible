---
# This playbook installs Rackspace Private Cloud v10.1


- name: Do Nothing
  hosts: all
  tags:
    - nothing
  tasks:
    - name: Ping Nodes
      ping:

- name: Prepare Environment
  hosts: all
  tags:
    - prepare
    - compute
    - block
    - object
    - maas
  tasks:
    - name: Install Packages
      apt: name={{ item }} state=present
      with_items:
        - colordiff
        - fping

    - name: Add Nodes Hosts File Entries (Long)
      lineinfile: dest=/etc/hosts line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ heat_stack_prefix|string }}-{{ item }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Add Nodes Hosts File Entries (Short)
      lineinfile: dest=/etc/hosts line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ item }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Add Nodes Hosts File Entries (Node)
      lineinfile: dest=/etc/hosts line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ "n%02d"|format(hostvars[item].node_id) }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Check Connectivity
      command: fping {{ item }}
      changed_when: False
      with_items: groups.all

    - name: Create /etc/ansible/facts.d
      file: path=/etc/ansible/facts.d state=directory

    - name: Create Dummy Fact
      ini_file: dest=/etc/ansible/facts.d/dummy.fact section=dummy option=dummy value=dummy

    - name: Gather Facts
      setup:

    - name: Set Environment Variables and Force Color Prompt
      lineinfile: dest=/root/.bashrc regexp='{{ item.regexp }}' line='{{ item.line }}' insertafter=EOF state=present
      with_items:
        - { regexp: '^(#)?force_color_prompt',      line: 'force_color_prompt=yes' }
        - { regexp: '^export MY_HEAT_STACK_PREFIX', line: 'export MY_HEAT_STACK_PREFIX={{ heat_stack_prefix|string }}' }
        - { regexp: '^export MY_NODE_ID',           line: 'export MY_NODE_ID={{ node_id }}' }
        - { regexp: '^export MY_IP',                line: 'export MY_IP={{ hostvars[inventory_hostname].ansible_eth2.ipv4.address }}' }
        - { regexp: '^export MY_PRIVATE_IP',        line: 'export MY_PRIVATE_IP={{ hostvars[inventory_hostname].ansible_eth2.ipv4.address }}' }
        - { regexp: '^export MY_PUBLIC_IP',         line: 'export MY_PUBLIC_IP={{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}' }

    - name: Create Swap File
      command: dd if=/dev/zero of=/mnt/8GB.swap bs=1024 count=8388608 creates=/mnt/8GB.swap

    - name: Format Swap File
      command: mkswap /mnt/8GB.swap
      changed_when: false

    - name: Check Swap File
      command: swapon -s
      register: check_swap_file_result
      changed_when: false

    - name: Enable Swap File
      command: swapon /mnt/8GB.swap
      when: "'/mnt/8GB.swap' not in check_swap_file_result.stdout"

    - name: Add Swap To /etc/fstab
      lineinfile: dest=/etc/fstab line='/mnt/8GB.swap  none  swap  sw 0  0' insertafter=EOF state=present

    - name: Set Swappiness
      sysctl: name=vm.swappiness value=90 state=present

    - name: Create Partition Table
      shell: |
        parted -s {{ item.device }} mktable {{ item.type }} && partprobe {{ item.device }}
      when: ansible_local.partitions is not defined
      with_items:
        - device: /dev/xvdz
          type: msdos

    - name: Create Primary Partitions
      shell: |
        export PARTITION_START=`parted {{ item.device }} unit GB print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/GB//'`
        if [[ $PARTITION_START -lt 1 ]]; then
          PARTITION_START=1
        fi
        export PARTITION_END=`awk "BEGIN { print $PARTITION_START + {{ item.size }} }"`
        parted -s -a optimal {{ item.device }} unit GB mkpart primary ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: infra
          device: /dev/xvdz
          size: 160
        - group: logger
          device: /dev/xvdz
          size: 30
        - group: compute
          device: /dev/xvdz
          size: 15
        - group: block
          device: /dev/xvdz
          size: 20
        - group: block
          device: /dev/xvdz
          size: 45
        - group: object
          device: /dev/xvdz
          size: 15

    - name: Create Extended Partitions (Extended Partition Will Consume All Free Space)
      shell: |
        export PARTITION_START=`parted {{ item.device }} unit GB print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/GB//'`
        export PARTITION_END=`parted {{ item.device }} unit GB print free | awk '/Free Space/ { print $2 }' | tail -n 1 | sed 's/GB//'`
        parted -s -a optimal {{ item.device }} unit GB mkpart extended ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: object
          device: /dev/xvdz

    - name: Create Logical Partitions
      shell: |
        export PARTITION_START=`parted {{ item.device }} print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/GB//'`
        export PARTITION_END=`awk "BEGIN { print $PARTITION_START + {{ item.size }} }"`
        parted -s -a optimal {{ item.device }} unit GB mkpart logical ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: object
          device: /dev/xvdz
          size: 25
        - group: object
          device: /dev/xvdz
          size: 25
        - group: object
          device: /dev/xvdz
          size: 25
        - group: object
          device: /dev/xvdz
          size: 25
        - group: object
          device: /dev/xvdz
          size: 25

    - name: Create Partitions Done Fact
      ini_file: dest=/etc/ansible/facts.d/partitions.fact section=state option=done value=true

- name: Setup Common
  hosts: all
  tags:
    - compute
    - block
    - object
    - maas
  tasks:
    - name: Check Connectivity
      command: fping {{ item }}
      changed_when: False
      with_items: groups.all

    - name: Genereate SSH Keypair
      command: ssh-keygen -f ~/.ssh/id_rsa -t rsa -q -N "" creates=/root/.ssh/id_rsa.pub
      when: inventory_hostname == groups.infra|first

    - name: Get SSH Public Key
      command: cat /root/.ssh/id_rsa.pub
      register: public_key_result
      changed_when: False
      when: inventory_hostname == groups.infra|first

    - name: Distribute SSH Public Key
      authorized_key: user=root key='{{ hostvars[ groups.infra|first ].public_key_result.stdout }}' state=present

    - name: Test SSH Connectivity
      command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ item }} hostname
      changed_when: False
      when: inventory_hostname == groups.infra|first
      with_items: groups.all

    - name: Update and Upgrade System
      apt: upgrade=safe update_cache=yes cache_valid_time=3600

    - name: Install Necessary Base Packages
      apt: pkg={{ item }} state=present update_cache=yes force=yes
      with_items:
        - aptitude
        - build-essential
        - git
        - python-dev
        - bridge-utils
        - debootstrap
        - ifenslave
        - lsof
        - lvm2
        - ntp
        - ntpdate
        - openssh-server
        - sudo
        - tcpdump
        - vlan

    - name: Create Physical Volumes
      command: pvcreate --metadatasize 2048 {{ item.device }}
      register: pvcreate_result
      failed_when: pvcreate_result.rc != 0 and pvcreate_result.rc != 5
      changed_when: False
      with_items:
        - device: /dev/xvdz1

    - name: Create Logical Volume Groups
      lvg: vg={{ item.vg }} pvs={{ item.pvs }} state=present vg_options=''
      with_items:
        - vg: lxc
          pvs: /dev/xvdz1

    - name: Create /etc/network/interfaces.d/
      file: dest=/etc/network/interfaces.d/ state=directory

    - name: Source /etc/network/interfaces.d/*.cfg
      lineinfile: dest=/etc/network/interfaces line='source /etc/network/interfaces.d/*.cfg' insertafter=EOF state=present

    - name: Create /etc/network/interfaces.d/rpc.cfg
      template: src=templates/etc/network/interfaces.d/rpc-10.1.cfg.j2 dest=/etc/network/interfaces.d/rpc.cfg

    - name: Bring Up VXLANs
      command: ifup vxlan-{{ item }}
      register: ifup_vxlans_result
      changed_when: "ifup_vxlans_result.rc == 0 and ifup_vxlans_result.stderr != 'ifup: interface vxlan-{{ item }} already configured'"
      with_items:
        - mgmt
        - vxlan
        - vlan
        - storage

    - name: Check Connectivity
      command: fping 172.29.236.{{ hostvars[item].node_id }}
      changed_when: False
      with_items: groups.all

- name: Setup Block
  hosts: block
  tags:
    - block
  tasks:
    - name: Create Physical Volumes
      command: pvcreate --metadatasize 2048 {{ item.device }}
      register: pvcreate_result
      failed_when: pvcreate_result.rc != 0 and pvcreate_result.rc != 5
      changed_when: False
      with_items:
        - device: /dev/xvdz2

    - name: Create Logical Volume Groups
      lvg: vg={{ item.vg }} pvs={{ item.pvs }} state=present vg_options=''
      with_items:
        - vg: cinder-volumes
          pvs: /dev/xvdz2

- name: Setup Object
  hosts: object
  tags:
    - object
  tasks:
    - name: Install Necessary Base Packages
      apt: pkg={{ item }} state=present update_cache=yes force=yes
      with_items:
        - xfsprogs

    - name: XFS Format Volumes
      filesystem: dev=/dev/{{ item.device }} fstype=xfs opts='-i size=1024 -L {{ item.label }}'
      with_items:
        - device: xvdz5
          label: swift1
        - device: xvdz6
          label: swift2
        - device: xvdz7
          label: swift3
        - device: xvdz8
          label: swift4
        - device: xvdz9
          label: swift5

    - name: Create Root Mount Points Directory
      file: path=/srv/node state=directory owner=root group=root

    - name: Create Device Mount Point Directories
      file: path=/srv/node/{{ item }} state=directory
      with_items:
        - swift1
        - swift2
        - swift3
        - swift4
        - swift5

    - name: Mount Device
      mount: name=/srv/node/{{ item }} src='LABEL={{ item }}' state=mounted fstype=xfs opts='noatime,nodiratime,nobarrier,logbufs=8' passno=0
      with_items:
        - swift1
        - swift2
        - swift3
        - swift4
        - swift5

- name: Configure Common
  hosts: infra[0]
  tags:
    - compute
    - block
    - object
    - maas
  tasks:
    - name: Create /opt
      file: dest=/opt state=directory

    - name: Clone RPC Repo
      git: repo=https://github.com/openstack/openstack-ansible.git dest=/opt/openstack-ansible version={{ rpc_release }} force=yes

    - name: Bugs - Apply Patches (OpenStack Ansible)
      command: git apply /opt/cba/rpc-heat-ansible/playbooks/files/patches/{{ item }} chdir=/opt/openstack-ansible
      when: apply_patches | bool
      ignore_errors: yes
      with_items:
        - bug-1522897.patch

    - name: Get Modern PIP
      command: curl -O http://mirror.rackspace.com/rackspaceprivatecloud/downloads/get-pip.py chdir=/opt creates=/opt/get-pip.py
      changed_when: False

    - name: Install Modern PIP
      command: python get-pip.py chdir=/opt
      changed_when: False

    - name: PIP Install Requirements
      pip: requirements=/opt/openstack-ansible/requirements.txt
      when: ansible_local.pip_install_requirements is not defined

    - name: PIP Install Requirements Done Fact
      ini_file: dest=/etc/ansible/facts.d/pip_install_requirements.fact section=state option=done value=true

    - name: Create /etc/rpc_deploy/conf.d
      file: dest=/etc/rpc_deploy/conf.d state=directory

    - name: Copy Default Configuration Files
      command: cp /opt/openstack-ansible/etc/rpc_deploy/{{ item }} /etc/rpc_deploy/{{ item }} creates=/etc/rpc_deploy/{{ item }}
      with_items:
        - rpc_environment.yml

    - name: Copy RPC User Config File
      template: src=templates/etc/rpc_deploy/rpc_user_config-10.1.yml.j2 dest=/etc/rpc_deploy/rpc_user_config.yml

    - name: Copy RPC User Variables File
      template: src=templates/etc/rpc_deploy/user_variables-10.1.yml.j2 dest=/etc/rpc_deploy/user_variables.yml

- name: Configure Object
  hosts: infra[0]
  tags:
    - object
  tasks:
    - name: Copy RPC Swift Config File
      template: src=templates/etc/rpc_deploy/conf.d/swift-10.1.yml.j2 dest=/etc/rpc_deploy/conf.d/swift.yml

    - name: Update RPC User Config File
      lineinfile: "dest=/etc/rpc_deploy/rpc_user_config.yml regexp='         ( #)? - swift_proxy' line='          - swift_proxy' state=present"

    - name: Update RPC User Variables File
      lineinfile: dest=/etc/rpc_deploy/user_variables.yml regexp='{{ item.regexp }}' line='{{ item.line }}' state=present
      with_items:
        - { regexp: '^glance_default_store:', line: 'glance_default_store: swift' }
        - { regexp: '^glance_swift_store_user:', line: 'glance_swift_store_user: service:glance' }
        - { regexp: '^glance_swift_store_container:', line: 'glance_swift_store_container: glance_images' }
        - { regexp: '^glance_swift_store_region:', line: 'glance_swift_store_region: RegionOne' }

    - name: Update RPC User Variables File - Cause Escaping - Copy Script
      copy: src=files/tmp/cause-escaping.sh dest=/tmp/cause-escaping.sh mode=0700

    - name: Update RPC User Variables File - Cause Escaping - Run Script
      command: /tmp/cause-escaping.sh

- name: Configure MaaS
  hosts: infra[0]
  tags:
    - maas
  tasks:
    - name: Update RPC User Variables File
      lineinfile: dest=/etc/rpc_deploy/user_variables.yml regexp='{{ item.regexp }}' line='{{ item.line }}' state=present
      with_items:
        - { regexp: '^rackspace_cloud_auth_url:', line: 'rackspace_cloud_auth_url: {{ rackspace_cloud_auth_url }}' }
        - { regexp: '^rackspace_cloud_tenant_id:', line: 'rackspace_cloud_tenant_id: {{ rackspace_cloud_tenant_id }}' }
        - { regexp: '^rackspace_cloud_username:', line: 'rackspace_cloud_username: {{ rackspace_cloud_username }}' }
        - { regexp: '^rackspace_cloud_password:', line: 'rackspace_cloud_password: {{ rackspace_cloud_password }}' }
        - { regexp: '^rackspace_cloud_api_key:', line: 'rackspace_cloud_api_key: {{ rackspace_cloud_api_key }}' }
        - { regexp: '^maas_notification_plan:', line: 'maas_notification_plan: {{ maas_notification_plan }}' }
        - { regexp: '^maas_scheme:', line: 'maas_scheme: http' }
        - { regexp: '^(# )?maas_(nova|horizon)_scheme:', line: 'maas_horizon_scheme: https' }

    - name: PIP Install Rackspace Monitoring CLI
      pip: name=rackspace-monitoring-cli state=present

    - name: Get IP Address Alias
      shell: raxmon-entities-list --details --username={{ rackspace_cloud_username }} --api-key={{ rackspace_cloud_api_key }} | awk -F "(" '/{{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}/ { print $2 }' | awk -F "'" '{ print $2}' | head -n 1
      register: infra1_maas_target_alias

    - name: Set MaaS Target Alias
      lineinfile: "dest=/etc/rpc_deploy/user_variables.yml regexp='maas_target_alias:' line='maas_target_alias: {{ infra1_maas_target_alias.stdout }}' state=present"

- name: Install Common - Play 1 of 2
  hosts: infra[0]
  tags:
    - compute
    - block
    - object
  tasks:
    - name: Run 'Setup - Setup Common' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/setup/setup-common.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Setup - Build Containers' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/setup/build-containers.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Setup - Restart Containers' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/setup/restart-containers.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Setup - Containers Common' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/setup/containers-common.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - HAProxy Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/haproxy-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Memcached Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/memcached-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Galera Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/galera-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Rabbit Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/rabbit-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Rsyslog Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/rsyslog-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Elasticsearch Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/elasticsearch-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Logstash Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/logstash-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Kibana Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/kibana-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Elasticsearch CLI Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/es2unix-install.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Infrastructure - Rsyslog Config' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/rsyslog-config.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install Compute - Play 1 of 2
  hosts: infra[0]
  tags:
    - compute
  tasks:
    - name: Run 'OpenStack - Keystone All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/keystone-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - Glance All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/glance-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - Heat All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/heat-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - Nova All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/nova-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - Neutron All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/neutron-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install Block
  hosts: infra[0]
  tags:
    - block
  tasks:
    - name: Run 'OpenStack - Cinder All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/cinder-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install Object
  hosts: infra[0]
  tags:
    - object
  tasks:
    - name: Run 'OpenStack - Swift All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/swift-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install Compute - Play 2 of 2
  hosts: infra[0]
  tags:
    - compute
  tasks:
    - name: Run 'OpenStack - Horizon All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/horizon-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - Utility All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/utility-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'OpenStack - RPC Support All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/openstack/rpc-support-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install Common - Play 2 of 2
  hosts: infra[0]
  tags:
    - compute
    - block
    - object
  tasks:
    - name: Run 'Infrastructure - Rsyslog Config' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/infrastructure/rsyslog-config.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install MaaS - Play 1 of 2
  hosts: infra[0]
  tags:
    - maas
  tasks:
    - name: Run 'Monitoring - Raxmon All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/raxmon-all.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Monitoring - MaaS Local' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/maas_local.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Monitoring - MaaS Remote' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/maas_remote.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Monitoring - MaaS CDM' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/maas_cdm.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Monitoring - MaaS SSL Check' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/maas_ssl_check.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

    - name: Run 'Monitoring - MaaS Swift' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/monitoring/swift_maas.yml chdir=/opt/openstack-ansible/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 2
      delay: 10

- name: Install MaaS - Play 2 of 2
  hosts: all
  tags:
    - maas
  tasks:
    - name: Check If Rackspace Monitoring Agent Is Install
      stat: path=/usr/bin/rackspace-monitoring-agent
      register: agent_installed

    - name: Restart Rackspace Monitoring Agent
      service: name=rackspace-monitoring-agent state=restarted
      when: agent_installed.stat.exists

- name: Update LibVirt CPU Map
  hosts: compute
  tags:
    - compute
  tasks:
    - name: Create /usr/share/libvirt
      file: path=/usr/share/libvirt state=directory

    - name: Copy LibVirt CPU Map
      copy: src=files/usr/share/libvirt/cpu_map.xml dest=/usr/share/libvirt/cpu_map.xml

    - name: Restart LibVirt
      service: name=libvirt-bin state=restarted

    - name: Restart Nova Compute
      service: name=nova-compute state=restarted
